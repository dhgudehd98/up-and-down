name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # 1. CI - 통합(build)
  build:
    runs-on: ubuntu-latest
    steps:
    # 저장소의 커밋된 master브랜치 내려받기
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: master

    # JDK 17 설치 (원하는 버전 및 배포판 지정)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 현재 작업 디렉토리와 파일 목록 출력
    - name: List directory structure
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la

    # Gradle 실행 권한 부여
    - name: Change directory and grant permission for gradlew
      run: |
        cd up-down/upProject
        chmod +x ./gradlew || echo "gradlew file not found"
    
    # Gradle Build (테스트 생략)
    - name: Build with Gradle
      run: |
        cd up-down/upProject
        ./gradlew clean build -x test

    # 빌드된 jar 파일을 도커 이미지로 빌드 및 도커 허브에 발행(푸시)
    - name: Docker build and publish
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        APP_NAME: ${{ secrets.APP_NAME }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker build -t "$DOCKER_USERNAME/$APP_NAME" up-down/upProject
        docker push "$DOCKER_USERNAME/$APP_NAME"

  # 2. CD 배포
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP SSH 접속 / docker image pull & run
    - name: NCP SSH Login and Docker Image pull and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASSWORD }}
        key: ${{ secrets.NCP_KEY }}
        port: ${{ secrets.NCP_PORT }}
        script: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          sudo docker stop $(sudo docker ps -a -q) || true
          sudo docker rm -f $(sudo docker ps -a -q) || true
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}
          sudo docker image prune -f
